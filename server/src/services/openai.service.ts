import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config(); // Load environment variables

// Ensure the API key is present in the environment variables
const apiKey = process.env.OPENAI_API_KEY;
if (!apiKey) {
  throw new Error('The OPENAI_API_KEY environment variable is missing or empty.');
}

// Initialize OpenAI client
const openai = new OpenAI({ apiKey });

// Function to generate an explanation using OpenAI GPT
export const generateExplanation = async (topic: string, style: string): Promise<string> => {
  const maxRetries = 3; // Maximum number of retries for rate-limited requests
  let attempt = 0;

  while (attempt < maxRetries) {
    try {
      // Make the request to OpenAI API
      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo', // Use the appropriate model
        messages: [
          {
            role: 'user',
            content: `Explain the topic "${topic}" in the style of "${style}".`,
          },
        ],
      });

      // Extract the explanation content from the response
      const content = response.choices?.[0]?.message?.content?.trim();

      if (!content) {
        throw new Error('No explanation was generated by OpenAI.');
      }

      return content;
    } catch (error: any) {
      if (error.status === 429 || error.code === 'insufficient_quota') {
        console.error(`Rate limit or quota exceeded: ${error.message}`);
        attempt++;

        if (attempt < maxRetries) {
          console.log(`Retrying request (${attempt}/${maxRetries})...`);
          await new Promise((resolve) => setTimeout(resolve, 2000)); // Wait 2 seconds before retrying
        } else {
          throw new Error(
            'Rate limit exceeded or insufficient quota. Please check your API usage and try again later.'
          );
        }
      } else {
        // Re-throw any other errors
        throw new Error('Failed to generate explanation from OpenAI.');
      }
    }
  }

  throw new Error('Failed to generate explanation after multiple attempts.');
};