"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateExplanation = void 0;
const openai_1 = __importDefault(require("openai"));
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config(); // Load environment variables
// Ensure the API key is present in the environment variables
const apiKey = process.env.OPENAI_API_KEY;
if (!apiKey) {
    throw new Error('The OPENAI_API_KEY environment variable is missing or empty.');
}
// Initialize OpenAI client
const openai = new openai_1.default({ apiKey });
// Function to generate an explanation using OpenAI GPT
const generateExplanation = (topic, style) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const maxRetries = 3; // Maximum number of retries for rate-limited requests
    let attempt = 0;
    while (attempt < maxRetries) {
        try {
            // Make the request to OpenAI API
            const response = yield openai.chat.completions.create({
                model: 'gpt-3.5-turbo', // Use the appropriate model
                messages: [
                    {
                        role: 'user',
                        content: `Explain the topic "${topic}" in the style of "${style}".`,
                    },
                ],
            });
            // Extract the explanation content from the response
            const content = (_d = (_c = (_b = (_a = response.choices) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.message) === null || _c === void 0 ? void 0 : _c.content) === null || _d === void 0 ? void 0 : _d.trim();
            if (!content) {
                throw new Error('No explanation was generated by OpenAI.');
            }
            return content;
        }
        catch (error) {
            if (error.status === 429 || error.code === 'insufficient_quota') {
                console.error(`Rate limit or quota exceeded: ${error.message}`);
                attempt++;
                if (attempt < maxRetries) {
                    console.log(`Retrying request (${attempt}/${maxRetries})...`);
                    yield new Promise((resolve) => setTimeout(resolve, 2000)); // Wait 2 seconds before retrying
                }
                else {
                    throw new Error('Rate limit exceeded or insufficient quota. Please check your API usage and try again later.');
                }
            }
            else {
                // Re-throw any other errors
                throw new Error('Failed to generate explanation from OpenAI.');
            }
        }
    }
    throw new Error('Failed to generate explanation after multiple attempts.');
});
exports.generateExplanation = generateExplanation;
